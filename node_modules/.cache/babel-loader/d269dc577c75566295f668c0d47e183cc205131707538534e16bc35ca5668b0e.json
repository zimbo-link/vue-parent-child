{"ast":null,"code":"import BookmarkItem from './bookmark-item';\nexport default {\n  name: 'BookmarkContainer',\n  components: {\n    BookmarkItem\n  },\n  data() {\n    return {\n      items: []\n    };\n  },\n  created() {\n    // Mock API call here. In this case it's returned data but we only need for example one of the properties.\n    const mockApiResponse = [{\n      id: 1,\n      author: 'Somebody',\n      publishedYear: 2000\n    }, {\n      id: 2,\n      author: 'Someone',\n      publishedYear: 1994\n    }, {\n      id: 3,\n      author: 'Something',\n      publishedYear: 1999\n    }, {\n      id: 4,\n      author: 'Somewhere',\n      publishedYear: 2001\n    }];\n    this.items = mockApiResponse.map(item => ({\n      id: item.id,\n      bookmarked: false\n    }));\n  },\n  methods: {\n    toggleBookmark(itemId) {\n      const foundItem = this.items.find(i => i.id === itemId);\n      foundItem.bookmarked = !foundItem.bookmarked;\n    },\n    toggleAll() {\n      for (const item of this.items) {\n        item.bookmarked = !item.bookmarked;\n      }\n    },\n    callApi() {\n      // Mock API call here. This time we create a new array and only post relevant data.\n      // Note how the local component state does not have to match 1:1 with any data from a GET or to a POST/PUT.\n      const mockApiCall = this.items.map(item => ({\n        id: item.id,\n        bookmarked: item.bookmarked,\n        favouriteNumber: Math.random()\n      }));\n      console.log(mockApiCall);\n    }\n  }\n};","map":{"version":3,"names":["BookmarkItem","name","components","data","items","created","mockApiResponse","id","author","publishedYear","map","item","bookmarked","methods","toggleBookmark","itemId","foundItem","find","i","toggleAll","callApi","mockApiCall","favouriteNumber","Math","random","console","log"],"sources":["/home/trev/assessments/edukudu-vue/parent-child/vueapp/src/components/bookmark-container.vue"],"sourcesContent":["<template>\n    <div style=\"border:1px solid black; margin: 10px;\">\n        <h1>Parent Component</h1>\n        <div>Bool: <<span></span></div>\n        <button @click=\"toggleAll\">Toggle All</button>\n        <button @click=\"callApi\">Mock API Call</button>\n        <bookmark-item\n            v-for=\"(item, index) in items\" :key=\"index\"\n            v-on:bookmark-toggle=\"toggleBookmark\"\n            :id=\"item.id\"\n            :bookmarked=\"item.bookmarked\" />\n    </div>\n</template>\n\n<script>\nimport BookmarkItem from './bookmark-item';\n\nexport default {\n    name: 'BookmarkContainer',\n    components: {\n        BookmarkItem\n    },\n    data () {\n        return {\n            items: []\n        }\n    },\n    created () {\n        // Mock API call here. In this case it's returned data but we only need for example one of the properties.\n        const mockApiResponse = [\n            { id: 1, author: 'Somebody', publishedYear: 2000 },\n            { id: 2, author: 'Someone', publishedYear: 1994 },\n            { id: 3, author: 'Something', publishedYear: 1999 },\n            { id: 4, author: 'Somewhere', publishedYear: 2001 },\n        ];\n\n        this.items = mockApiResponse.map(item => ({\n            id: item.id,\n            bookmarked: false\n        }));\n    },\n    methods: {\n        toggleBookmark (itemId) {\n            const foundItem = this.items.find(i => i.id === itemId);\n            foundItem.bookmarked = !foundItem.bookmarked;\n        },\n        toggleAll () {\n            for (const item of this.items) {\n                item.bookmarked = !item.bookmarked;\n            }\n        },\n        callApi () {\n            // Mock API call here. This time we create a new array and only post relevant data.\n            // Note how the local component state does not have to match 1:1 with any data from a GET or to a POST/PUT.\n            const mockApiCall = this.items.map(item => ({\n                id: item.id,\n                bookmarked: item.bookmarked,\n                favouriteNumber: Math.random(),\n            }));\n\n            console.log(mockApiCall);\n        }\n    }\n}\n</script>"],"mappings":"AAeA,OAAOA,YAAW,MAAO,iBAAiB;AAE1C,eAAe;EACXC,IAAI,EAAE,mBAAmB;EACzBC,UAAU,EAAE;IACRF;EACJ,CAAC;EACDG,IAAGA,CAAA,EAAK;IACJ,OAAO;MACHC,KAAK,EAAE;IACX;EACJ,CAAC;EACDC,OAAMA,CAAA,EAAK;IACP;IACA,MAAMC,eAAc,GAAI,CACpB;MAAEC,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,UAAU;MAAEC,aAAa,EAAE;IAAK,CAAC,EAClD;MAAEF,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,SAAS;MAAEC,aAAa,EAAE;IAAK,CAAC,EACjD;MAAEF,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,WAAW;MAAEC,aAAa,EAAE;IAAK,CAAC,EACnD;MAAEF,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,WAAW;MAAEC,aAAa,EAAE;IAAK,CAAC,CACtD;IAED,IAAI,CAACL,KAAI,GAAIE,eAAe,CAACI,GAAG,CAACC,IAAG,KAAM;MACtCJ,EAAE,EAAEI,IAAI,CAACJ,EAAE;MACXK,UAAU,EAAE;IAChB,CAAC,CAAC,CAAC;EACP,CAAC;EACDC,OAAO,EAAE;IACLC,cAAaA,CAAGC,MAAM,EAAE;MACpB,MAAMC,SAAQ,GAAI,IAAI,CAACZ,KAAK,CAACa,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACX,EAAC,KAAMQ,MAAM,CAAC;MACvDC,SAAS,CAACJ,UAAS,GAAI,CAACI,SAAS,CAACJ,UAAU;IAChD,CAAC;IACDO,SAAQA,CAAA,EAAK;MACT,KAAK,MAAMR,IAAG,IAAK,IAAI,CAACP,KAAK,EAAE;QAC3BO,IAAI,CAACC,UAAS,GAAI,CAACD,IAAI,CAACC,UAAU;MACtC;IACJ,CAAC;IACDQ,OAAMA,CAAA,EAAK;MACP;MACA;MACA,MAAMC,WAAU,GAAI,IAAI,CAACjB,KAAK,CAACM,GAAG,CAACC,IAAG,KAAM;QACxCJ,EAAE,EAAEI,IAAI,CAACJ,EAAE;QACXK,UAAU,EAAED,IAAI,CAACC,UAAU;QAC3BU,eAAe,EAAEC,IAAI,CAACC,MAAM,CAAC;MACjC,CAAC,CAAC,CAAC;MAEHC,OAAO,CAACC,GAAG,CAACL,WAAW,CAAC;IAC5B;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}